{"version":3,"sources":["Components/card-list.js","Components/card.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Cardlist","props","className","src","cardlist","id","alt","name","email","username","Card","this","Robots","map","robot","key","Component","Search","type","placeholder","onChange","PropSearch","App","fetchApi","fetch","then","response","json","result","setState","SearchField","e","SearchRobot","target","value","state","FilterRobots","filter","filterRobot","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6RAqBeA,EAnBE,SAAAC,GAAK,OACpB,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,QACb,yBACEA,UAAU,YACVC,IAAG,+BAA0BF,EAAMG,SAASC,GAAzC,aACHC,IAAI,KAEN,yBAAKJ,UAAU,aACb,4BAAKD,EAAMG,SAASG,OAEtB,wBAAIL,UAAU,+BACZ,wBAAIA,UAAU,mBAAmBD,EAAMG,SAASI,OAChD,wBAAIN,UAAU,mBAAmBD,EAAMG,SAASK,cCHzCC,G,uLANX,OAAOC,KAAKV,MAAMW,OAAOC,IAAI,SAAAC,GAAK,OAChC,kBAAC,EAAD,CAAUC,IAAKD,EAAMT,GAAID,SAAUU,U,GAHtBE,cCQJC,EAVA,SAAAhB,GACb,OACE,2BACEiB,KAAK,SACLC,YAAY,iBACZjB,UAAU,gBACVkB,SAAUnB,EAAMoB,cC8CPC,G,kBA/Cb,aAAe,IAAD,8BACZ,+CAQFC,SAAW,WACTC,MAAM,+CAA+CC,KAAK,SAAAC,GAAQ,OAChEA,EAASC,OAAOF,KAAK,SAAAG,GAAM,OAAI,EAAKC,SAAS,CAAEjB,OAAQgB,SAX7C,EAedE,YAAc,SAAAC,GACZ,EAAKF,SAAS,CAAEG,YAAaD,EAAEE,OAAOC,SAbtC,EAAKC,MAAQ,CACXvB,OAAQ,GACRoB,YAAa,IALH,E,iFAoBZrB,KAAKY,a,+BAGG,IAAD,EACyBZ,KAAKwB,MAA7BvB,EADD,EACCA,OAAQoB,EADT,EACSA,YACVI,EAAexB,EAAOyB,OAAO,SAAAC,GAAW,OAC5CA,EAAY/B,KAAKgC,cAAcC,SAASR,EAAYO,iBAEtD,OACE,yBAAKrC,UAAU,QACb,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,UACb,4CAEF,kBAAC,EAAD,CAAQmB,WAAYV,KAAKmB,cAEzB,yBAAK5B,UAAU,aACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAMU,OAAQwB,Y,GAvCVpB,cCMEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC,iB","file":"static/js/main.def4a276.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Cardlist = props => (\r\n  <div className=\"col-sm-4 pd-card\">\r\n    <div className=\"card\">\r\n      <img\r\n        className=\"img-fluid\"\r\n        src={`https://robohash.org/${props.cardlist.id}?set=set2`}\r\n        alt=\"\"\r\n      />\r\n      <div className=\"card-body\">\r\n        <h5>{props.cardlist.name}</h5>\r\n      </div>\r\n      <ul className=\"list-group list-group-flush\">\r\n        <li className=\"list-group-item\">{props.cardlist.email}</li>\r\n        <li className=\"list-group-item\">{props.cardlist.username}</li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Cardlist;\r\n","import React, { Component } from \"react\";\r\nimport Cardlist from \"./card-list.js\";\r\nimport \"./card.css\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    return this.props.Robots.map(robot => (\r\n      <Cardlist key={robot.id} cardlist={robot} />\r\n    ));\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\n\r\nconst Search = props => {\r\n  return (\r\n    <input\r\n      type=\"search\"\r\n      placeholder=\"Search a Robot\"\r\n      className=\"search__input\"\r\n      onChange={props.PropSearch}\r\n    />\r\n  );\r\n};\r\nexport default Search;\r\n","import React, { Component } from \"react\";\nimport Card from \"./Components/card\";\nimport Search from \"./Components/Search\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      Robots: [],\n      SearchRobot: \"\"\n    };\n  }\n\n  fetchApi = () => {\n    fetch(\"https://jsonplaceholder.typicode.com/users/\").then(response =>\n      response.json().then(result => this.setState({ Robots: result }))\n    );\n  };\n\n  SearchField = e => {\n    this.setState({ SearchRobot: e.target.value });\n  };\n\n  componentDidMount() {\n    this.fetchApi();\n  }\n\n  render() {\n    const { Robots, SearchRobot } = this.state;\n    const FilterRobots = Robots.filter(filterRobot =>\n      filterRobot.name.toLowerCase().includes(SearchRobot.toLowerCase())\n    );\n    return (\n      <div className=\"App \">\n        <div className=\"container-fluid remove-pd\">\n          <div className=\"header\">\n            <h1> Robots App</h1>\n          </div>\n          <Search PropSearch={this.SearchField} />\n\n          <div className=\"container\">\n            <div className=\"row\">\n              <Card Robots={FilterRobots} />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}